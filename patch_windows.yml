---
- name: Windows Patch Playbook
  hosts: windows
  gather_facts: yes

  tasks:
    - name: Set OS variable
      ansible.builtin.set_fact:
        os: "{{ ansible_facts.os_name }} {{ ansible_facts.os_version }}"

    - name: Show OS value
      ansible.builtin.debug:
        msg: "OS: {{ os }}"

    - name: Search for Windows Updates
      ansible.windows.win_updates:
        state: searched
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - DefinitionUpdates
      register: searchresult

    - name: Show Pending Updates
      ansible.builtin.debug:
        msg: >-
          {% set pending = searchresult.updates | default({}) 
             | dict2items 
             | map(attribute='value') 
             | map(attribute='title') 
             | list %}
          {% if pending | length > 0 %}
          Pending updates:
          {% for u in pending %}
            - {{ u }}
          {% endfor %}
          {% else %}
          No updates available.
          {% endif %}

    - name: Install Windows Updates
      ansible.windows.win_updates:
        state: installed
        reboot: true
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - DefinitionUpdates
      register: patchresult

    - name: Final Patch Summary
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          OS: {{ os }}
          {% set updates = patchresult.updates | default({}) | dict2items | map(attribute='value') | list %}
          {% set installed = updates | selectattr('kb','defined') | selectattr('installed','equalto',true) | map(attribute='kb') | list | flatten %}
          {% set failed = updates | selectattr('kb','defined') | selectattr('installed','equalto',false) | map(attribute='kb') | list | flatten %}
          Installed KBs: {{ installed if installed | length > 0 else 'None' }}
          Failed KBs: {{ failed if failed | length > 0 else 'None' }}
